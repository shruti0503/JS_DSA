/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {

    const seen={};
    let result =[];

    for(let i=0;i<nums.length;i++){
        const comp =target-nums[i];
        if(seen.hasOwnProperty(comp)){
            result=[seen[comp],i];
            return result; 
        }

        seen[nums[i]]=i;
    }

    return result;

    
};


///////////////////////////////////

Absolutely! Let's use the same example you provided in the C++ code:

**Input:**

- `nums`: [2, 7, 11, 15]
- `target`: 9

**Steps:**

1. We start with an empty `seen` object and an empty `result` array.
2. We iterate through the `nums` array:
    - **Iteration 1:**
        - `nums[i] = 2`, its complement is `target - 2 = 7`.
        - `seen` is empty, so we store `2` and its index 0 in `seen`.
    - **Iteration 2:**
        - `nums[i] = 7`, its complement is `target - 7 = 2`.
        - We find `2` already stored in `seen` at index 0.
        - `result = [0, 2]`, as both indices add up to `9`.
        - **Early return!** We found the pair, no need to continue iterating.

**Visualization:**

- Start with two columns: number and seen.
- For each iteration:
    - Add the current number and its index to the table.
    - Check if the target minus the current number exists in the "seen" column.
        - If yes, the indices of both numbers form the `result`.
        - If no, continue to the next iteration.

Here's the table representing the process:

| Number | Seen |
|---|---|
| 2 | 2 (0) |
| 7 | 2 (0), 7 (1) |
| 11 | 2 (0), 7 (1), 11 (2) |
| 15 | 2 (0), 7 (1), 11 (2), 15 (3) |

As you can see, once we encounter `7` (whose complement is `2` already present in `seen`), we stop iterating and return the indices 0 and 1 in the `result` array.

I hope this visualization helps you understand how the `twoSum` function works with a concrete example! Let me know if you have any other questions.
